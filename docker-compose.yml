services:
  db:
    image: postgis/postgis:17-3.4 # statt postgres:16-alpine
    environment:
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-dia}
      POSTGRES_DB: ${PG_DATABASE:-jobhunter}
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data

      # Init-SQL beim ersten Start eines leeren Volumes
      - ./server/src/db/create_tables.sql:/docker-entrypoint-initdb.d/01_create_tables.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks: [app-net]

  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001 # <— hier auf 3001
      JWT_SECRET: ${JWT_SECRET}
      PG_HOST: db
      PG_PORT: 5432
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
    ports:
      - "8080:3001"
    depends_on:
      db:
        condition: service_healthy
    networks: [app-net]

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        BUILD_DIR: dist # Vite-Output
    container_name: client
    restart: unless-stopped
    ports:
      - "${CLIENT_PORT:-3000}:80" # öffnet http://localhost:3000
    depends_on:
      - api
    networks: [app-net]

volumes:
  db-data:

networks:
  app-net:
