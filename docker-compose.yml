services:
  db:
    platform: linux/amd64
    image: postgis/postgis:17-3.4
    environment:
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-dia}
      POSTGRES_DB: ${PG_DATABASE:-jobhunter}
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./server/initdb:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks: [app-net]

  api:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      JWT_SECRET: ${JWT_SECRET}
      PG_HOST: db
      PG_PORT: 5432
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      OTP_BASE_URL: ${OTP_BASE_URL}
      OTP_PATH_PREFIX: ${OTP_PATH_PREFIX}
      OTP_ROUTER_ID: ${OTP_ROUTER_ID}
    ports:
      - "8080:3001"
    depends_on:
      db:
        condition: service_healthy
    networks: [app-net]

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        BUILD_DIR: dist
    container_name: client
    restart: unless-stopped
    ports:
      - "${CLIENT_PORT:-3000}:80"
    depends_on:
      - api
    networks: [app-net]

  otp:
    image: eclipse-temurin:11-jre
    container_name: otp
    working_dir: /otp
    volumes:
      - ./otp:/otp
    ports:
      - "8082:8080"
    command:
      [
        "java",
        "-Xmx8G",
        "-jar",
        "otp.jar",
        "--router",
        "current",
        "--graphs",
        "graphs",
        "--server",
      ]
    restart: unless-stopped
    networks: [app-net]
    healthcheck:
      test:
        ["CMD-SHELL", "wget -qO- http://localhost:8080/otp/routers || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
  pipeline:
    build:
      context: ./data-pipeline
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./data-pipeline/.env
    environment:
      PG_HOST: db
      PG_PORT: 5432
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
    networks: [app-net]
    profiles: ["manual"]

volumes:
  db-data:

networks:
  app-net:
